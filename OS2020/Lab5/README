Operating Systems 001

Lab 5 Work Log

	We created the file Shell.c, which is present in this directory

	We added commands to compileOS.sh to compile Shell.c, link it to 
	basm.o, generate an executable shell program, and copy the program
	into the disk image where it can be loaded.

	We modified the main routine of the Shell program to repeatedly 
	prompt the user for a command, parse the command name and 
	arguments from the input buffer, and execute the command.

		Commands and arguments are recognized as being delineated by
		whitespace, with multiple spaces being reduced to a single space

	We added functionality for the following commands:

		"boot", which calls interrupt 0d25 to reload the kernel

		"clrs", which uses interrupt 0d33 with function 0d12 to clear the 
		screen

		"echo", which uses interrupt 0d33 with function 0d1 to print the 
		argument to the screen

	In addition, we added code that, for the following commands, prints the
	name of the command and the arguments passed to it:

		"copy", which takes two arguments

		"ddir", which takes no arguments

		"exec", which takes one argument

		"help", which takes no arguments

		"prnt", which takes one argument

		"remv", which takes one argument

		"senv", which takes one argument

		"show", which takes one argument

		"twet", which takes one argument


Lab 4 Work Log

	We added the runProgram function to kernel.c
	
		Given parameters start (int), size (int), and segment (int), the 
		readSectors functions is called through interrupt 0x21 (0d33) to
		load the program file, whose location is indicated by start and size, 
		into a local buffer with a maximum size of 13312 bytes

		The segment parameter is multiplied by 0x1000 (0d4096) to get 
		the base address of the segment in memory

		Each byte in the local buffer is transferred to the location of the 
		segment, with the offset indicated by the index of the byte, using
		the putInMemory function provided in kernel.asm

		The launchProgram function, which is also provided in kernel.asm, is 
		called to run the program file, with the location being specified as 
		the address of the segment
		
	We added the stop function to kernel.c

		For now, this simply causes the program to hang by going into an 
		infinite loop

		The stop function is mapped to the call of interrupt 0x21 (0d33) 
		with ax set to 5

	We added a command to compileOS.sh that loads the config file into the
	disk image

	We loaded the fib program into the disk image at sector 30, from which it
	gets executed by the kernel through the runProgram function

		The program will run when the kernel is run using the copy of the disk
		image included in this directory


Lab 3 Work Log

	We deleted the contents of the main function from the previous lab

	We added the function readSectors to kernel.c

		Given parameters buffer (char*), sector (int), and sectorCount (int),
		a number of sectors equal to sectorCount are read into buffer 
		starting from the sector number indicated by the sector parameter

		To do this, interrupt 0d19 (0x13) is called with function 2 in AH, 
		sectorCount in AL, the address of buffer in BX, the relative starting 
		sector number ((sector % 18) + 1) in CH, the starting track number 
		(sector / 36) in CL the starting head number ((sector / 18) % 2) in DH,
		and the device number 0 in DL

	We mapped to the call of interrupt 0d33 (0x21) corresponding to the 
	value 2 passed in AX, with BX corresponding to the buffer parameter, 
	CX corresponding to the sector parameter, and DX corresponding to 
	the sectorCount parameter

	We added the writeSectors function to kernel.c, which is the same as the
	readSectors function except it uses function 3 for interrupt 0d19 (0x13), 
	moves data from the buffer to the disk rather than the other way around,
	and is called with AX = 6 from interrupt 0d33 (0x21)

	We modified the clearScreen function to take parameters bx (int) and cx
	(int). Once the screen is cleared, the color scheme is changed to the 
	background color code stored in bx and the foreground color code stored
	in cx

		clearScreen was mapped to an interrupt 0d33 (0x21) call with AX=12,
		BX being passed into bx, and CX being passed into cx

	We added a command to compileOS.sh that writes a test file to the disk 
	image containing data to be read into a buffer using the readSectors 
	function

	We modified the main function to clear the screen and change the color
	scheme to magenta (background) and yellow (foreground) before printing
	the kernel logo, reading the data from the test file, and printing the data


Lab 2 Work Log

	We added the printString function to kernel.c

		Given parameter c (char*),  the function calls interrupt 0d22 
		(0x16) to read a character from the keyboard, which gets saved to 
		the next position in c and is also printed on the screen using 
		interrupt 0d16 (0x10)

		If the backspace character is pressed, it gets printed on the screen,
		moving the cursor back, and decrements the index if it is not 
		already set to 0

		If the enter key is pressed, the input ends and a null character is 
		appended to the current index to form a string

		The backspace and enter keys are not added to the string

	We added the mod and div functions to kernel.c to act in place of 
	the / and % operations, which are not supported in bcc.

	We added the writeInt function to kernel.c

		Given parameter x (int), the mod and div functions are used to 
		extract each digit of x and add it to a string, which gets printed
		to the screen using the printString function called through 
		interrupt 0d33 (0x21)

		If x equals 0, "0" gets printed to the screen directly as the 
		routine used for other numbers does not work for it

	We added the readInt function to kernel.c

		Given parameter n (int*), *n is set to 0 by default and the 
		readString function is called on a variable c (char*)

		For each character in c before the null character, *n is multiplied
		by 10 to shift each digit to the left, after which the character 
		is converted into a digit and added to *n

	We mapped the readString, writeInt, and readInt functions to calls of
	interrupt 0d33 (0x21) corresponding to the values 1, 13, and 14 stored
	in AX respectively

		The interrupt call for writeInt now takes a parameter for cx that 
		determines whether the output goes to the screen or the printer,
		just like with printString

		All calls of readString, writeInt, and readInt have been replaced
		with interrupt calls

	We downloaded the file madLibKernel.c and replaced the contents of
	the main function of kernel.c with it to test the functions we added. 
	The mad lib program run when the kernel is started


Lab 1 Work Log

	We downloaded the files kernel.c, kernel.asm, and bootload.asm, all 
	of which are present in this directory

	We assembled bootload.asm into the bootload executable, which is 
	present in this directory

	We assembled kernel.asm into the kasm.o output file, which is 
	present in this directory

	We created the file CompileOS.sh and added terminal commands to 
	do the following:

		Populate the disk image with zeroes to fill it up to its 
		necessary size

		Place the contents of bootload into the disk image

		Compile kernel.c into kernel.o using bcc

		Link kernel.o with kasm.o to create the kernel executable

		Place the contents of kernel into the disk image at the necessary
		location (sector 259)

	There are a total of five commands that can be viewed when opening
	compileOS.sh

	We made compileOS.sh executable. Entering './compileOS.sh' will
	create kernel.o and kernel, and make it so that entering 'echo “c” | 
	bochs –f bdos.txt' will run the kernel in bochs.

	We added the printString function to kernel.c

		Given parameters c (char*) and d (int), each character in c that 
		comes before the null character (not including the null character) 
		will be sent to the printer output through interrupt 0d23 (0x17) 
		if d equals 1, or displayed on the screen through interrupt 0d16
		(0x10) otherwise.

		When the kernel is run, the logo will appear on the screen since 
		d is set to 0, while the statement "Hello world from Thomas and 
		Geetha." will appear in the file printer.out since it was printed with 
		d set to 1.

	We set printString to be called by the handleInterrupt21 function
	when the parameter for ax is set to 0, with bx being passed as c and cx
	being passed as d.

	We then replaced each call of printString in the rest of the program with 
	a call to interrupt 0d33 (0x21) that results in the same output. These 
	changes can be viewed in the main, printLogo, and clearScreen functions
	in kernel.c.
		